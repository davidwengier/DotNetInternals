@page "/"
@inject NavigationManager navigationManager
@using DotNetInternals.RazorAccess
@using System.Diagnostics.CodeAnalysis

<PageTitle>Razor • DotNetInternals</PageTitle>

<div class="d-flex flex-column h-100">
    <div class="row align-items-center justify-content-center mb-2">
        @* Compile button *@
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="Compile">
                Compile
                @if (compilationInProgress)
                {
                    <div class="spinner-border spinner-border-sm ms-2" role="status">
                        <span class="visually-hidden">Compiling...</span>
                    </div>
                }
            </button>
        </div>

        @* Output switch *@
        <InputRadioGroup @bind-Value="SelectedOutputType">
            <div class="btn-group col-auto" role="group" aria-label="Output type">
                <InputRadio class="btn-check" id="outputSyntax" Value="OutputType.Syntax" />
                <label class="btn btn-outline-primary" for="outputSyntax">
                    Syntax
                </label>

                <InputRadio class="btn-check" id="outputIr" Value="OutputType.Ir" />
                <label class="btn btn-outline-primary" for="outputIr">
                    IR
                </label>

                <InputRadio class="btn-check" id="outputCSharp" Value="OutputType.CSharp" />
                <label class="btn btn-outline-primary" for="outputCSharp">
                    C#
                </label>

                <InputRadio class="btn-check" id="outputDiagnostics" Value="OutputType.Diagnostics" />
                <label class="btn btn-outline-primary" for="outputDiagnostics">
                    Diagnostics
                    @if (compiled?.NumErrors > 0)
                    {
                        <span class="badge bg-danger">@compiled.NumErrors</span>
                    }
                    else if (compiled?.NumWarnings > 0)
                    {
                        <span class="badge bg-warning">@compiled.NumWarnings</span>
                    }
                </label>
            </div>
        </InputRadioGroup>

        @* Word wrapping toggle *@
        <div class="col-auto">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="wordWrap" @bind="wordWrap" />
                <label class="form-check-label" for="wordWrap">
                    Word wrap
                </label>
            </div>
        </div>
    </div>

    @* Input / output text areas *@
    @{
        var textAreaClass = $"form-control h-100 {(wordWrap ? "" : "no-wrap")}";
    }
    <div class="row g-2 flex-grow-1">
        <div class="col-12 col-md">
            <textarea @bind="text" class="@textAreaClass" placeholder="Razor code" spellcheck="false"></textarea>
        </div>
        <div class="col-12 col-md">
            <textarea @bind="output" class="@textAreaClass" readonly placeholder="Empty output (click Compile to refresh)" spellcheck="false"></textarea>
        </div>
    </div>
</div>

@code {
    private OutputType _outputType = OutputType.CSharp;
    private bool compilationInProgress;
    private string text = "";
    private CompiledRazor? compiled;
    private string output = "";
    private bool wordWrap;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var slug = uri.Fragment.TrimStart('#');

        text = string.IsNullOrWhiteSpace(slug)
            ? RazorCompiler.InitialCode
            : Compressor.Uncompress(slug);
    }

    private OutputType SelectedOutputType
    {
        get => _outputType;
        set
        {
            _outputType = value;
            UpdateOutput();
        }
    }

    private async Task Compile()
    {
        compilationInProgress = true;
        await RefreshAsync();
        compiled = RazorCompiler.Compile(text);
        UpdateOutput();

        var slug = Compressor.Compress(text);
        navigationManager.NavigateTo(navigationManager.BaseUri + "#" + slug, forceLoad: false);
        
        compilationInProgress = false;
    }

    private async Task RefreshAsync()
    {
        _ = InvokeAsync(StateHasChanged);
        await Task.Yield();
    }

    private void UpdateOutput()
    {
        output = SelectedOutputType switch
        {
            _ when compiled is null => "",
            OutputType.Syntax => compiled.Syntax,
            OutputType.Ir => compiled.Ir,
            OutputType.CSharp => compiled.CSharp,
            OutputType.Diagnostics => compiled.Diagnostics,
            _ => throw new InvalidOperationException(),
        };
    }

    private enum OutputType
    {
        Syntax,
        Ir,
        CSharp,
        Diagnostics,
    }
}
